jQuery.cookie=function(b,j,m){if(typeof j!="undefined"){m=m||{};if(j===null){j="";m.expires=-1}var e="";if(m.expires&&(typeof m.expires=="number"||m.expires.toUTCString)){var f;if(typeof m.expires=="number"){f=new Date();f.setTime(f.getTime()+(m.expires*24*60*60*1000))}else{f=m.expires}e="; expires="+f.toUTCString()}var l=m.path?"; path="+(m.path):"";var g=m.domain?"; domain="+(m.domain):"";var a=m.secure?"; secure":"";document.cookie=[b,"=",encodeURIComponent(j),e,l,g,a].join("")}else{var d=null;if(document.cookie&&document.cookie!=""){var k=document.cookie.split(";");for(var h=0;h<k.length;h++){var c=jQuery.trim(k[h]);if(c.substring(0,b.length+1)==(b+"=")){d=decodeURIComponent(c.substring(b.length+1));break}}}return d}};
;/*! JavaScript Templates 2.1.0 | https://github.com/blueimp/JavaScript-Templates | Copyright 2011, Sebastian Tschan https://blueimp.net | Licensed under the MIT license: http://www.opensource.org/licenses/MIT */
(function(a){"use strict";var b=function(a,c){var d=/[^\w\-\.:]/.test(a)?new Function(b.arg+",tmpl","var _e=tmpl.encode"+b.helper+",_s='"+a.replace(b.regexp,b.func)+"';return _s;"):b.cache[a]=b.cache[a]||b(b.load(a));return c?d(c,b):function(a){return d(a,b)}};b.cache={},b.load=function(a){return document.getElementById(a).innerHTML},b.regexp=/([\s'\\])(?![^%]*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g,b.func=function(a,b,c,d,e,f){if(b)return{"\n":"\\n","\r":"\\r","\t":"\\t"," ":" "}[a]||"\\"+a;if(c)return c==="="?"'+_e("+d+")+'":"'+("+d+"||'')+'";if(e)return"';";if(f)return"_s+='"},b.encReg=/[<>&"'\x00]/g,b.encMap={"<":"&lt;",">":"&gt;","&":"&amp;",'"':"&quot;","'":"&#39;"},b.encode=function(a){return String(a||"").replace(b.encReg,function(a){return b.encMap[a]||""})},b.arg="o",b.helper=",print=function(s,e){_s+=e&&(s||'')||_e(s);},include=function(s,d){_s+=tmpl(s,d);}",typeof define=="function"&&define.amd?define(function(){return b}):a.tmpl=b})(this);
;// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>
// This work is free. You can redistribute it and/or modify it
// under the terms of the WTFPL, Version 2
// For more information see LICENSE.txt or http://www.wtfpl.net/
//
// For more information, the home page:
// http://pieroxy.net/blog/pages/lz-string/testing.html
//
// LZ-based compression algorithm, version 1.4.4
(function (global) {
    var LZString = (function() {

    // private property
        var f = String.fromCharCode;
        var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
        var baseReverseDic = {};

        function getBaseValue(alphabet, character) {
            if (!baseReverseDic[alphabet]) {
                baseReverseDic[alphabet] = {};
                for (var i=0 ; i<alphabet.length ; i++) {
                    baseReverseDic[alphabet][alphabet.charAt(i)] = i;
                }
            }
            return baseReverseDic[alphabet][character];
        }

        var LZString = {
            compressToBase64 : function (input) {
                if (input == null) return "";
                var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});
                switch (res.length % 4) { // To produce valid Base64
                    default: // When could this happen ?
                    case 0 : return res;
                    case 1 : return res+"===";
                    case 2 : return res+"==";
                    case 3 : return res+"=";
                }
            },

            decompressFromBase64 : function (input) {
                if (input == null) return "";
                if (input == "") return null;
                return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });
            },

            compressToUTF16 : function (input) {
                if (input == null) return "";
                return LZString._compress(input, 15, function(a){return f(a+32);}) + " ";
            },

            decompressFromUTF16: function (compressed) {
                if (compressed == null) return "";
                if (compressed == "") return null;
                return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });
            },

            //compress into uint8array (UCS-2 big endian format)
            compressToUint8Array: function (uncompressed) {
                var compressed = LZString.compress(uncompressed);
                var buf=new Uint8Array(compressed.length*2); // 2 bytes per character

                for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {
                    var current_value = compressed.charCodeAt(i);
                    buf[i*2] = current_value >>> 8;
                    buf[i*2+1] = current_value % 256;
                }
                return buf;
            },

            //decompress from uint8array (UCS-2 big endian format)
            decompressFromUint8Array:function (compressed) {
                if (compressed===null || compressed===undefined){
                    return LZString.decompress(compressed);
                } else {
                    var buf=new Array(compressed.length/2); // 2 bytes per character
                    for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {
                        buf[i]=compressed[i*2]*256+compressed[i*2+1];
                    }

                    var result = [];
                    buf.forEach(function (c) {
                        result.push(f(c));
                    });
                    return LZString.decompress(result.join(''));

                }

            },


            //compress into a string that is already URI encoded
            compressToEncodedURIComponent: function (input) {
                if (input == null) return "";
                return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
            },

            //decompress from an output of compressToEncodedURIComponent
            decompressFromEncodedURIComponent:function (input) {
                if (input == null) return "";
                if (input == "") return null;
                input = input.replace(/ /g, "+");
                return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });
            },

            compress: function (uncompressed) {
                return LZString._compress(uncompressed, 16, function(a){return f(a);});
            },
            _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
                if (uncompressed == null) return "";
                var i, value,
                    context_dictionary= {},
                    context_dictionaryToCreate= {},
                    context_c="",
                    context_wc="",
                    context_w="",
                    context_enlargeIn= 2, // Compensate for the first entry which should not count
                    context_dictSize= 3,
                    context_numBits= 2,
                    context_data=[],
                    context_data_val=0,
                    context_data_position=0,
                    ii;

                for (ii = 0; ii < uncompressed.length; ii += 1) {
                    context_c = uncompressed.charAt(ii);
                    if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
                        context_dictionary[context_c] = context_dictSize++;
                        context_dictionaryToCreate[context_c] = true;
                    }

                    context_wc = context_w + context_c;
                    if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
                        context_w = context_wc;
                    } else {
                        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                            if (context_w.charCodeAt(0)<256) {
                                for (i=0 ; i<context_numBits ; i++) {
                                    context_data_val = (context_data_val << 1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                }
                                value = context_w.charCodeAt(0);
                                for (i=0 ; i<8 ; i++) {
                                    context_data_val = (context_data_val << 1) | (value&1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = value >> 1;
                                }
                            } else {
                                value = 1;
                                for (i=0 ; i<context_numBits ; i++) {
                                    context_data_val = (context_data_val << 1) | value;
                                    if (context_data_position ==bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = 0;
                                }
                                value = context_w.charCodeAt(0);
                                for (i=0 ; i<16 ; i++) {
                                    context_data_val = (context_data_val << 1) | (value&1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = value >> 1;
                                }
                            }
                            context_enlargeIn--;
                            if (context_enlargeIn == 0) {
                                context_enlargeIn = Math.pow(2, context_numBits);
                                context_numBits++;
                            }
                            delete context_dictionaryToCreate[context_w];
                        } else {
                            value = context_dictionary[context_w];
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }


                        }
                        context_enlargeIn--;
                        if (context_enlargeIn == 0) {
                            context_enlargeIn = Math.pow(2, context_numBits);
                            context_numBits++;
                        }
                        // Add wc to the dictionary.
                        context_dictionary[context_wc] = context_dictSize++;
                        context_w = String(context_c);
                    }
                }

                // Output the code for w.
                if (context_w !== "") {
                    if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                        if (context_w.charCodeAt(0)<256) {
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                            }
                            value = context_w.charCodeAt(0);
                            for (i=0 ; i<8 ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }
                        } else {
                            value = 1;
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1) | value;
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = 0;
                            }
                            value = context_w.charCodeAt(0);
                            for (i=0 ; i<16 ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }
                        }
                        context_enlargeIn--;
                        if (context_enlargeIn == 0) {
                            context_enlargeIn = Math.pow(2, context_numBits);
                            context_numBits++;
                        }
                        delete context_dictionaryToCreate[context_w];
                    } else {
                        value = context_dictionary[context_w];
                        for (i=0 ; i<context_numBits ; i++) {
                            context_data_val = (context_data_val << 1) | (value&1);
                            if (context_data_position == bitsPerChar-1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else {
                                context_data_position++;
                            }
                            value = value >> 1;
                        }


                    }
                    context_enlargeIn--;
                    if (context_enlargeIn == 0) {
                        context_enlargeIn = Math.pow(2, context_numBits);
                        context_numBits++;
                    }
                }

                // Mark the end of the stream
                value = 2;
                for (i=0 ; i<context_numBits ; i++) {
                    context_data_val = (context_data_val << 1) | (value&1);
                    if (context_data_position == bitsPerChar-1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                    } else {
                        context_data_position++;
                    }
                    value = value >> 1;
                }

                // Flush the last char
                while (true) {
                    context_data_val = (context_data_val << 1);
                    if (context_data_position == bitsPerChar-1) {
                        context_data.push(getCharFromInt(context_data_val));
                        break;
                    }
                    else context_data_position++;
                }
                return context_data.join('');
            },

            decompress: function (compressed) {
                if (compressed == null) return "";
                if (compressed == "") return null;
                return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });
            },

            _decompress: function (length, resetValue, getNextValue) {
                var dictionary = [],
                    next,
                    enlargeIn = 4,
                    dictSize = 4,
                    numBits = 3,
                    entry = "",
                    result = [],
                    i,
                    w,
                    bits, resb, maxpower, power,
                    c,
                    data = {val:getNextValue(0), position:resetValue, index:1};

                for (i = 0; i < 3; i += 1) {
                    dictionary[i] = i;
                }

                bits = 0;
                maxpower = Math.pow(2,2);
                power=1;
                while (power!=maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                        data.position = resetValue;
                        data.val = getNextValue(data.index++);
                    }
                    bits |= (resb>0 ? 1 : 0) * power;
                    power <<= 1;
                }

                switch (next = bits) {
                    case 0:
                        bits = 0;
                        maxpower = Math.pow(2,8);
                        power=1;
                        while (power!=maxpower) {
                            resb = data.val & data.position;
                            data.position >>= 1;
                            if (data.position == 0) {
                                data.position = resetValue;
                                data.val = getNextValue(data.index++);
                            }
                            bits |= (resb>0 ? 1 : 0) * power;
                            power <<= 1;
                        }
                        c = f(bits);
                        break;
                    case 1:
                        bits = 0;
                        maxpower = Math.pow(2,16);
                        power=1;
                        while (power!=maxpower) {
                            resb = data.val & data.position;
                            data.position >>= 1;
                            if (data.position == 0) {
                                data.position = resetValue;
                                data.val = getNextValue(data.index++);
                            }
                            bits |= (resb>0 ? 1 : 0) * power;
                            power <<= 1;
                        }
                        c = f(bits);
                        break;
                    case 2:
                        return "";
                }
                dictionary[3] = c;
                w = c;
                result.push(c);
                while (true) {
                    if (data.index > length) {
                        return "";
                    }

                    bits = 0;
                    maxpower = Math.pow(2,numBits);
                    power=1;
                    while (power!=maxpower) {
                        resb = data.val & data.position;
                        data.position >>= 1;
                        if (data.position == 0) {
                            data.position = resetValue;
                            data.val = getNextValue(data.index++);
                        }
                        bits |= (resb>0 ? 1 : 0) * power;
                        power <<= 1;
                    }

                    switch (c = bits) {
                        case 0:
                            bits = 0;
                            maxpower = Math.pow(2,8);
                            power=1;
                            while (power!=maxpower) {
                                resb = data.val & data.position;
                                data.position >>= 1;
                                if (data.position == 0) {
                                    data.position = resetValue;
                                    data.val = getNextValue(data.index++);
                                }
                                bits |= (resb>0 ? 1 : 0) * power;
                                power <<= 1;
                            }

                            dictionary[dictSize++] = f(bits);
                            c = dictSize-1;
                            enlargeIn--;
                            break;
                        case 1:
                            bits = 0;
                            maxpower = Math.pow(2,16);
                            power=1;
                            while (power!=maxpower) {
                                resb = data.val & data.position;
                                data.position >>= 1;
                                if (data.position == 0) {
                                    data.position = resetValue;
                                    data.val = getNextValue(data.index++);
                                }
                                bits |= (resb>0 ? 1 : 0) * power;
                                power <<= 1;
                            }
                            dictionary[dictSize++] = f(bits);
                            c = dictSize-1;
                            enlargeIn--;
                            break;
                        case 2:
                            return result.join('');
                    }

                    if (enlargeIn == 0) {
                        enlargeIn = Math.pow(2, numBits);
                        numBits++;
                    }

                    if (dictionary[c]) {
                        entry = dictionary[c];
                    } else {
                        if (c === dictSize) {
                            entry = w + w.charAt(0);
                        } else {
                            return null;
                        }
                    }
                    result.push(entry);

                    // Add w+entry[0] to the dictionary.
                    dictionary[dictSize++] = w + entry.charAt(0);
                    enlargeIn--;

                    w = entry;

                    if (enlargeIn == 0) {
                        enlargeIn = Math.pow(2, numBits);
                        numBits++;
                    }

                }
            }
        };
        return LZString;
    })();
    global.lz = LZString;
})(window);

/**
 * CustomEvent polyfill
 */
(function () {

    if ( typeof window.CustomEvent === "function" ) return false;

    function CustomEvent ( event, params ) {
        params = params || { bubbles: false, cancelable: false, detail: undefined };
        var evt = document.createEvent( 'CustomEvent' );
        evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
        return evt;
    }

    CustomEvent.prototype = window.Event.prototype;

    window.CustomEvent = CustomEvent;
})();

/**
 * Object.assign polyfill
 */
if (typeof Object.assign != 'function') {
    Object.assign = function(target, varArgs) { // .length of function is 2
        'use strict';
        if (target == null) { // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }

        var to = Object(target);

        for (var index = 1; index < arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource != null) { // Skip over if undefined or null
                for (var nextKey in nextSource) {
                    // Avoid bugs when hasOwnProperty is shadowed
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    };
}

var JSON = JSON || {};
JSON.stringify = JSON.stringify || function (obj) {
    var t = typeof (obj);
    if (t != "object" || obj === null) {
        // simple data type
        if (t == "string") obj = '"'+obj+'"';
        return String(obj);
    }
    else {
        // recurse array or object
        var n, v, json = [], arr = (obj && obj.constructor == Array);
        for (n in obj) {
            v = obj[n]; t = typeof(v);
            if (t == "string") v = '"'+v+'"';
            else if (t == "object" && v !== null) v = JSON.stringify(v);
            json.push((arr ? "" : '"' + n + '":') + String(v));
        }
        return (arr ? "[" : "{") + String(json) + (arr ? "]" : "}");
    }
};

var App = window.App || {};
(function (App, global) {
    var _UPDATE_FUNCTIONALS = {1024: true};
    var registeredEvents = {};
    $.extend(App, {
        Gdpr: {
            _COOKIE_NAME: '__cmp_gdpr',
            _PUB_COOKIE_NAME: '__cmp_gdpr_pvl',
            _VENDOR_LIST_VERSION: '1',
            _TMPL: 'gdpr-notification',
            _consent: {},
            _euConsentCookieLifeTime: 365,
            Init: function () {
                // try to read existing consent
                var consentData = App.Gdpr.ReadConsent();

                // and update utag data
                App.Gdpr.SetUtag(consentData);

                // change to custom cookie lifetime once consent data updated
                App.Gdpr.on('consentUpdated', function (event) {
                    var euConsent = $.cookie('EuConsent');
                    if (event.data.hasOwnProperty('allAccepted')) {
                        $.cookie('EuConsent', euConsent, {path: '/', expires: event.data.allAccepted ? 61 : 7});
                    }
                });

                if (global.utag_data.gdpr.allAccepted) {
                    // rewrite EuConsent cookie to 61 days
                    var euConsent = $.cookie('EuConsent');
                    $.cookie('EuConsent', euConsent, {path: '/', expires: 61});
                    // rewrite non-iab cookie to 61 days
                    App.Gdpr.SetConsent(consentData.vendors);
                    App.Gdpr.Accept();
                }

                global.addEventListener('message', function (event) {
                    var parseData = function (data) {
                        var json = data;
                        if (typeof data === "string") {
                            try {
                                json = JSON.parse(data);
                            } catch (e) {
                            }
                        }
                        return json;
                    };
                    var data = parseData(event.data);

                    if (typeof data === "string") {
                        var uiEvent = data.split(':');

                        if (uiEvent.length) {
                            var evnt = uiEvent[0];
                            var eventCategory = uiEvent[1];
                            var eventAction = uiEvent[2];
                            var eventValue = uiEvent[3];

                            if (evnt === 'cmpui') {
                                // we only care about the cmpui events
                                if (eventCategory === 'view' && eventAction === 'rendered') {
                                    var frame = $('#cmp-container-id')[0];
                                    var classNames = frame.className.split(/\s+/);

                                    classNames = classNames.filter(function (value) {
                                        return !!value && value.substr(0, 14) !== 'view-rendered-';
                                    });

                                    classNames.push('view-rendered-' + eventValue);
                                    frame.className = classNames.join(' ');
                                } else if (eventCategory === 'ui' && eventAction === 'loaded') {
                                    event.source.postMessage(JSON.stringify({customConsent: App.Gdpr.ReadConsent()}), CMPUI_URL);

                                    $('.breaking-news-container').addClass('with-gdpr');
                                }
                            } else if (evnt === 'ga') {
                                App.GoogleAnalytics.TrackCustomEvent(eventCategory, eventAction, uiEvent[4] || 'gdpr', eventValue || '1');
                            }
                        }
                    } else if (data.hasOwnProperty('nonIABConsent')) {
                        App.Gdpr.SetConsent(data.nonIABConsent);
                        App.Gdpr.mergeConsent(App.Gdpr.GetConsent());
                        if (data.hasOwnProperty('allAccepted') && data.allAccepted) {
                            App.Gdpr.Accept();
                        } else {
                            App.Gdpr.PartialAccept();
                        }
                        App.Gdpr.emit('consentUpdated', {previousConsent: consentData, currentConsent: App.Gdpr.ReadConsent(), allAccepted: data.allAccepted});
                    } else if (data.hasOwnProperty('pubVendorListVersion')) {
                        App.Gdpr.SetPubVendorListCookie(data.pubVendorListVersion);
                    }
                }, false);

                $(document).ready(function () {
                    if (global.location.toString().match(/\/(privacy|cookie-policy)$/)) {
                        document.body.className += ' reduce-consent-tile';
                    }
                    
                    // check updated functionals
                    App.Gdpr.CheckNewFunctionals();

                    // cmp oath
                    global.__cmp('init', {
                        gdprAppliesGlobally: true,
                        uiUrl: global.CMPUI_URL,
                        uiCustomParams: {
                            vendor: 'ds'
                        }
                    });

                    // when user consented
                    global.__cmp('getConsentData', null, function (result) {
                        if (!!result.consentData) {
                            // we check pubvendors version
                            App.Gdpr.GetPubvendors(function (vendorList) {
                                // cast to integer
                                vendorList.version = vendorList.version >>> 0;
                                // and compare that against last stored version
                                if (App.Gdpr.GetPubVendorListVersion() !== vendorList.version) {
                                    // we need to remove cookie otherwise user will get the functional screen
                                    $.cookie('EuConsent', null, {expires: -1000, path: '/'});

                                    // when they are different we need to re-consent user
                                    console.log('We need to re-consent user. pubvendors.json has changed. Latest version: ', vendorList.version);
                                    // open the modal (should display banner)
                                    global.__cmp('renderConsents');
                                }
                            });
                        }
                    });
                });
            },
            mergeConsent: function (newConsent) {
                var currentConsent = App.Gdpr.ReadConsent();
                newConsent = App.Gdpr.NormalizeConsent(newConsent);
                App.Gdpr.SetConsent(Object.assign(currentConsent.vendors, newConsent.vendors));
            },
            emit: function (eventName, data) {
                var $event = $.Event(eventName, {target: this, data: data});
                if (registeredEvents.hasOwnProperty(eventName)) {
                    for (var i in registeredEvents[eventName]) {
                        var handler = registeredEvents[eventName][i];
                        if (!handler.props.fireOnce || !handler.props.fired) {
                            handler.props.fired = true;
                            registeredEvents[eventName][i] = handler;
                            handler.handler($event);
                        }
                    }
                }
            },
            on: function (eventName, eventHandler, props) {
                if (!registeredEvents.hasOwnProperty(eventName)) {
                    registeredEvents[eventName] = [];
                }
                props = props || {};
                registeredEvents[eventName].push({props: props, handler: eventHandler});
            },
            one: function (eventName, eventHandler) {
                this.on(eventName, eventHandler, {fireOnce: true});
            },
            Accept: function () {
                // get consent
                var consentData = App.Gdpr.GetConsent();

                // set expiry information in the cookie
                consentData.iat = (new Date()).getTime();
                consentData.niab.expires = 61 * 24 * 60 * 60 * 1000;
                consentData.iab.expires = 61 * 24 * 60 * 60 * 1000;
                consentData.allAccepted = true;

                // hash data
                var hashedConsentData = App.Gdpr.HashConsent(consentData);

                // set cookie
                $.cookie(App.Gdpr._COOKIE_NAME, hashedConsentData, {expires: 61, path: '/'});

                // update utag
                App.Gdpr.SetUtag(App.Gdpr.ReadConsent());

                $('.breaking-news-container').removeClass('with-gdpr');
            },
            PartialAccept: function () {
                // get consent
                var consentData = App.Gdpr.GetConsent();

                // set expiry information in the cookie
                consentData.iat = (new Date()).getTime();
                consentData.niab.expires = 7 * 24 * 60 * 60 * 1000;
                consentData.iab.expires = 7 * 24 * 60 * 60 * 1000;
                consentData.allAccepted = false;

                // hash data
                var hashedConsentData = App.Gdpr.HashConsent(consentData);

                // set cookie
                $.cookie(App.Gdpr._COOKIE_NAME, hashedConsentData, {expires: 7, path: '/'});

                // update utag
                App.Gdpr.SetUtag(App.Gdpr.ReadConsent());
            },
            ReadRawConsent: function () {
                return $.cookie(App.Gdpr._COOKIE_NAME);
            },
            ReadConsent: function () {
                // try to find the cookie
                var hashedConsentData = App.Gdpr.ReadRawConsent();
                var consentData;

                if (!!hashedConsentData) {
                    // cookie exists then unhash consent data
                    consentData = App.Gdpr.UnhashConsent(hashedConsentData);
                } else {
                    // when no cookie has been found
                    consentData = App.Gdpr.GetEmptyConsent();
                }

                return App.Gdpr.NormalizeConsent(consentData);
            },
            SetConsent: function (consent) {
                this._consent = {
                    version: App.Gdpr._VENDOR_LIST_VERSION,
                    vendors: consent,
                    allAccepted: false,
                    iab: {},
                    niab: {}
                };
            },
            GetConsent: function () {
                return this._consent;
            },
            GetEmptyConsent: function () {
                return {
                    version: App.Gdpr._VENDOR_LIST_VERSION,
                    vendors: {},
                    allAccepted: false,
                    iab: {},
                    niab: {}
                };
            },
            /**
             * @return {string}
             */
            HashConsent: function (consentData) {
                var jsonData = JSON.stringify(consentData);

                return global.lz.compressToBase64(jsonData);
            },
            UnhashConsent: function (hashedConsentData) {
                var consentData = App.Gdpr.GetEmptyConsent();
                try {
                    // check data is compressed (null if not)
                    var decompressedData = global.lz.decompressFromBase64(hashedConsentData);
                    decompressedData = decompressedData || hashedConsentData;
                    consentData = JSON.parse(decompressedData);
                } catch (e) { }

                return consentData;
            },
            GetPubvendors: function (callback) {
                var instance = this;
                if (instance._pubvendorsData) {
                    // is cached, run callback
                    typeof callback === 'function' && callback(this._pubvendorsData);
                } else {
                    $.ajax({url: '/pubvendors.json', dataType: 'json', success: function (data) {
                            // cache
                            instance._pubvendorsData = data;
                            // run callback
                            typeof callback === 'function' && callback(instance._pubvendorsData);
                        }});
                }
            },
            SetPubVendorListCookie: function (listVersion) {
                $.cookie(App.Gdpr._PUB_COOKIE_NAME, listVersion, {expires: 90, path: '/'});
            },
            GetPubVendorListVersion: function () {
                return $.cookie(App.Gdpr._PUB_COOKIE_NAME) >>> 0 || 0;
            },
            SetUtag: function (consentData) {
                // use existing definition
                global.utag_data = global.utag_data || {};

                // overwrite gdpr with new consent data
                global.utag_data.gdpr = consentData;
            },
            NormalizeConsent: function (consent) {
                var normalizedConsent = {
                    version: consent.version,
                    vendors: {},
                    allAccepted: consent.allAccepted,
                    iat: consent.iat,
                    iab: consent.iab,
                    niab: consent.niab
                };

                for (var v in consent.vendors) {
                    var id;
                    var consented;
                    var item = consent.vendors[v];

                    if (item.constructor.name === 'Boolean') {
                        // new consent
                        id = v;
                        consented = item;
                    } else {
                        // old consent
                        id = item.id || item;
                    }

                    if (consented !== undefined) {
                        // consent is described in new consent data
                        normalizedConsent.vendors[id] = consented;
                    } else {
                        // consent is given if available in old consent data
                        normalizedConsent.vendors[id] = true;
                    }
                }

                return normalizedConsent;
            },
            ConsentChanged: function (handler) {
                this.one('consentChanged', handler);
            },
            /**
             * @return {boolean}
             */
            VendorSupported: function (vendorId, forceUpdate) {
                var supported = false;
                var matched = false;

                vendorId = vendorId >>> 0;

                // check vendor consents
                if (global.utag_data.gdpr) {
                    if (global.utag_data.gdpr.vendors.hasOwnProperty(vendorId)) {
                        matched = true;
                        supported = global.utag_data.gdpr.vendors[vendorId];
                    }
                }

                // didn't match anything or update forced and is iab
                if ((!matched || forceUpdate) && vendorId < 1000) {
                    // get consent for future requests
                    global.__cmp('getVendorConsents', null, function (response, success) {
                        // read existing consent
                        var previousConsent = App.Gdpr.ReadConsent();
                        var currentConsent = App.Gdpr.ReadConsent();
                        // vendor consents
                        if (success) {
                            // then push it to own cookie
                            currentConsent.vendors[vendorId] = response.vendorConsents[vendorId];
                            // update consent
                            App.Gdpr.SetConsent(currentConsent.vendors);
                            // save it
                            if (previousConsent.allAccepted) {
                                App.Gdpr.Accept();
                            } else {
                                App.Gdpr.PartialAccept();
                            }
                            // emit consent changed event
                            App.Gdpr.emit('consentChanged', {vendor: vendorId, previousConsent: previousConsent, currentConsent: currentConsent});
                        }
                    });
                }

                console.info('[GDPR] Checking vendor (', vendorId, ') consented:', supported);

                return supported;
            },
            CheckNewFunctionals: function () {
                var consentGiven = !!$.cookie('EuConsent');
                var functionals = {length: 0, vendors: {}};

                if (_UPDATE_FUNCTIONALS) {
                    for (var i in _UPDATE_FUNCTIONALS) {
                        if (_UPDATE_FUNCTIONALS.hasOwnProperty(i) && global.utag_data.gdpr.vendors[i] === undefined) {
                            functionals.vendors[i] = _UPDATE_FUNCTIONALS[i];
                            functionals.length++;
                        }
                    }
                }

                if (consentGiven && functionals.length) {
                    this.UpdateFunctionals(functionals.vendors);
                    this.ShowNewFunctionalBanner();
                }
            },
            UpdateFunctionals: function (functionals) {
                // read existing consent
                var previousConsent = App.Gdpr.ReadConsent();
                var currentConsent = App.Gdpr.ReadConsent();

                for (var i in functionals) {
                    if (functionals.hasOwnProperty(i)) {
                        currentConsent.vendors[i] = functionals[i];
                    }
                }

                // update consent
                App.Gdpr.SetConsent(currentConsent.vendors);
                // save it
                App.Gdpr.Accept();
                // emit consent changed event
                App.Gdpr.emit('consentChanged', {previousConsent: previousConsent, currentConsent: currentConsent});
            },
            ShowNewFunctionalBanner: function () {
                var bannerTmpl = [
                    '<div class="gdpr-notification">',
                        '<p class="gdpr-notification-notice">',
                            '<a href="https://www.dailystar.co.uk">Dailystar.co.uk</a> relies on cookies to collect and process data. ',
                            'We have recently added a new partner to our functional partner list. To get more information about these ',
                            'cookies and the processing of your personal data, check our ',
                            '<a href="/privacy">Privacy Policy</a> &amp; <a href="/cookie-policy">Cookie Policy</a>. ',
                            'You can manage these settings ',
                            '<a href="javascript:window.__cmp(\'renderConsents\')">here</a>.',
                        '</p>',
                        '<p>',
                            '<a class="gdpr-btn primary">OK</a>',
                        '</p>',
                    '</div>'
                ];

                if (!$('.gdpr-notification').length) {
                    $('body').append(bannerTmpl.join("\n"));
                    $('.gdpr-notification').show();
                }

                $('a', '.gdpr-notification').on('click', function () {
                    $('.gdpr-notification').remove();
                });
            }
        }
    });

    App.Gdpr.Init();
})(App, window);